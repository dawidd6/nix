#!/usr/bin/env python3

import argparse
import subprocess
import pathlib
import difflib
import sys


# Returns splitted string lines
def get_saved_settings(filepath):
    file = open(filepath, "a+")
    file.seek(0)  # cause append
    content = file.read().splitlines()
    file.close()
    return content


def set_saved_settings(filepath, settings):
    file = open(filepath, "w+")
    for line in settings:
        file.write(line)
        file.write("\n")
    file.close()


# Returns splitted string lines
def get_current_settings():
    args = ["dconf", "dump", "/"]
    output = subprocess.run(args, capture_output=True).stdout
    return output.decode().splitlines()


def set_current_settings(filepath):
    file = open(filepath, "r")
    args = ["dconf", "load", "/"]
    subprocess.run(args, stdin=file)
    file.close()


# Returns splitted string lines
def get_diff(current, saved):
    return list(
        difflib.unified_diff(
            saved, current, fromfile="saved", tofile="current", lineterm=""
        )
    )


def status(args):
    current = get_current_settings()
    saved = get_saved_settings(args.filepath)
    diff = get_diff(current, saved)
    if args.current:
        for c in current:
            print(c)
        return
    if args.saved:
        for s in saved:
            print(s)
        return
    if len(diff) == 0:
        print("Already up-to-date")
    elif args.diff:
        for d in diff:
            print(d)
    else:
        print("Changes detected")


def backup(args):
    current = get_current_settings()
    saved = get_saved_settings(args.filepath)
    diff = get_diff(current, saved)
    if len(diff) == 0:
        print("Already up-to-date")
    else:
        set_saved_settings(args.filepath, current)


def restore(args):
    current = get_current_settings()
    saved = get_saved_settings(args.filepath)
    diff = get_diff(current, saved)
    if len(diff) == 0:
        print("Already up-to-date")
    elif len(saved) == 0:
        print("Nothing to restore")
    else:
        set_current_settings(args.filepath)


filepath = pathlib.Path.joinpath(pathlib.Path.home(), ".config/dconf/user.ini")

parser = argparse.ArgumentParser(
    description="Backup and restore dconf database.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.set_defaults(func=None)
parser.add_argument("-f", "--filepath", help="Where to save settings", default=filepath)
subparsers = parser.add_subparsers(metavar="")

parser_status = subparsers.add_parser("status", help="Print current status")
parser_status.set_defaults(func=status)
parser_status.add_argument(
    "-d", "--diff", help="Show differences in unified output", action="store_true"
)
parser_status.add_argument(
    "-c", "--current", help="Show current settings", action="store_true"
)
parser_status.add_argument(
    "-s", "--saved", help="Show saved settings", action="store_true"
)

parser_backup = subparsers.add_parser("backup", help="Backup current settings")
parser_backup.set_defaults(func=backup)

parser_restore = subparsers.add_parser("restore", help="Restore saved settings")
parser_restore.set_defaults(func=restore)

args = parser.parse_args()
if args.func:
    args.func(args)
else:
    parser.print_help()
